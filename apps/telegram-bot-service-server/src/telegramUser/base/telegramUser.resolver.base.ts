/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TelegramUser } from "./TelegramUser";
import { TelegramUserCountArgs } from "./TelegramUserCountArgs";
import { TelegramUserFindManyArgs } from "./TelegramUserFindManyArgs";
import { TelegramUserFindUniqueArgs } from "./TelegramUserFindUniqueArgs";
import { CreateTelegramUserArgs } from "./CreateTelegramUserArgs";
import { UpdateTelegramUserArgs } from "./UpdateTelegramUserArgs";
import { DeleteTelegramUserArgs } from "./DeleteTelegramUserArgs";
import { TelegramUserService } from "../telegramUser.service";
@graphql.Resolver(() => TelegramUser)
export class TelegramUserResolverBase {
  constructor(protected readonly service: TelegramUserService) {}

  async _telegramUsersMeta(
    @graphql.Args() args: TelegramUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TelegramUser])
  async telegramUsers(
    @graphql.Args() args: TelegramUserFindManyArgs
  ): Promise<TelegramUser[]> {
    return this.service.telegramUsers(args);
  }

  @graphql.Query(() => TelegramUser, { nullable: true })
  async telegramUser(
    @graphql.Args() args: TelegramUserFindUniqueArgs
  ): Promise<TelegramUser | null> {
    const result = await this.service.telegramUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TelegramUser)
  async createTelegramUser(
    @graphql.Args() args: CreateTelegramUserArgs
  ): Promise<TelegramUser> {
    return await this.service.createTelegramUser({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TelegramUser)
  async updateTelegramUser(
    @graphql.Args() args: UpdateTelegramUserArgs
  ): Promise<TelegramUser | null> {
    try {
      return await this.service.updateTelegramUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TelegramUser)
  async deleteTelegramUser(
    @graphql.Args() args: DeleteTelegramUserArgs
  ): Promise<TelegramUser | null> {
    try {
      return await this.service.deleteTelegramUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
