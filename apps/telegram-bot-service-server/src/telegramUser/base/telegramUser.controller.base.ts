/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TelegramUserService } from "../telegramUser.service";
import { TelegramUserCreateInput } from "./TelegramUserCreateInput";
import { TelegramUser } from "./TelegramUser";
import { TelegramUserFindManyArgs } from "./TelegramUserFindManyArgs";
import { TelegramUserWhereUniqueInput } from "./TelegramUserWhereUniqueInput";
import { TelegramUserUpdateInput } from "./TelegramUserUpdateInput";

export class TelegramUserControllerBase {
  constructor(protected readonly service: TelegramUserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TelegramUser })
  async createTelegramUser(
    @common.Body() data: TelegramUserCreateInput
  ): Promise<TelegramUser> {
    return await this.service.createTelegramUser({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TelegramUser] })
  @ApiNestedQuery(TelegramUserFindManyArgs)
  async telegramUsers(@common.Req() request: Request): Promise<TelegramUser[]> {
    const args = plainToClass(TelegramUserFindManyArgs, request.query);
    return this.service.telegramUsers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TelegramUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async telegramUser(
    @common.Param() params: TelegramUserWhereUniqueInput
  ): Promise<TelegramUser | null> {
    const result = await this.service.telegramUser({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TelegramUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTelegramUser(
    @common.Param() params: TelegramUserWhereUniqueInput,
    @common.Body() data: TelegramUserUpdateInput
  ): Promise<TelegramUser | null> {
    try {
      return await this.service.updateTelegramUser({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TelegramUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTelegramUser(
    @common.Param() params: TelegramUserWhereUniqueInput
  ): Promise<TelegramUser | null> {
    try {
      return await this.service.deleteTelegramUser({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
